import requests, time, io
import streamlit as st
from PIL import Image
import requests
import io
import time
import base64
import urllib.parse


BACKEND = "http://localhost:8000"  # backend FastAPI

st.set_page_config(page_title="IoT Security Dashboard", layout="wide")

# ---- session state cho login dashboard ----
if "logged_in" not in st.session_state:
    st.session_state.logged_in = False

def do_login(user, pw):
    r = requests.post(f"{BACKEND}/api/login",
                      json={"username": user, "password": pw})
    if r.status_code == 200:
        st.session_state.logged_in = True
        st.success("Login th√†nh c√¥ng")
    else:
        st.error("Sai t√†i kho·∫£n ho·∫∑c m·∫≠t kh·∫©u")

def do_logout():
    requests.post(f"{BACKEND}/api/logout")
    st.session_state.logged_in = False


def get_recording_status_for_cam(backend_base, cam_id):
    """
    H·ªèi backend /api/record/status r·ªìi xem cam_id n√†y c√≥ ƒëang record kh√¥ng.
    Tr·∫£ v·ªÅ dict:
    {
      "recording": True/False,
      "file": "...mp4" ho·∫∑c None,
      "fps": 8,
      "start_ts": "20251026_224500"
    }
    """
    try:
        r = requests.get(f"{backend_base}/api/record/status", timeout=5)
        if r.status_code != 200:
            return {"recording": False, "file": None, "fps": None, "start_ts": None}
        data = r.json()
    except Exception:
        return {"recording": False, "file": None, "fps": None, "start_ts": None}

    active_list = data.get("active_recordings", [])
    for item in active_list:
        if item.get("cam_id") == cam_id:
            return {
                "recording": True,
                "file": item.get("file"),
                "fps": item.get("fps"),
                "start_ts": item.get("start_ts")
            }

    return {"recording": False, "file": None, "fps": None, "start_ts": None}

def render_ai_frame_from_b64(b64_str):
    """
    Nh·∫≠n chu·ªói base64 JPEG t·ª´ backend (/api/detect_only_frame)
    -> tr·∫£ v·ªÅ ·∫£nh PIL.Image ƒë·ªÉ st.image() d√πng.
    """
    if not b64_str:
        return None
    try:
        raw = base64.b64decode(b64_str)
        return Image.open(io.BytesIO(raw))
    except Exception:
        return None

# ---- n·∫øu ch∆∞a ƒëƒÉng nh·∫≠p -> hi·ªán m√†n h√¨nh login v√† d·ª´ng ----
if not st.session_state.logged_in:
    st.title("ƒêƒÉng nh·∫≠p h·ªá th·ªëng gi√°m s√°t an ninh")
    user = st.text_input("Username", value="admin")
    pw = st.text_input("Password", type="password", value="123456")
    if st.button("Login"):
        do_login(user, pw)
    st.stop()

# ---- Giao di·ªán ch√≠nh sau login ----
st.sidebar.title("Menu")
page = st.sidebar.radio(
    "Ch·ªçn trang",
    ["Live & Control", "Events", "Recordings", "Camera Manager"]
)

if st.sidebar.button("ƒêƒÉng xu·∫•t"):
    do_logout()
    st.rerun()

st.title("H·ªá th·ªëng Gi√°m s√°t An ninh IoT")





# ============================================================
# PAGE: Live & Control
# ============================================================
if page == "Live & Control":
    # l·∫•y danh s√°ch camera t·ª´ backend
    cams_resp = requests.get(f"{BACKEND}/api/cameras").json()
    cams = cams_resp["cameras"]

    if len(cams) == 0:
        st.error("Ch∆∞a c√≥ camera n√†o trong h·ªá th·ªëng. V√†o Camera Manager ƒë·ªÉ th√™m.")
        st.stop()

    tab_single, tab_multi = st.tabs(["ƒêi·ªÅu khi·ªÉn 1 camera", "Xem nhi·ªÅu camera"])

    # --------------------------------------------------------
    # TAB 1: ƒêi·ªÅu khi·ªÉn 1 camera
    # --------------------------------------------------------
    with tab_single:
        st.subheader("ƒêi·ªÅu khi·ªÉn t·ª´ng camera + xem tr·ª±c ti·∫øp + ph√°t hi·ªán ng∆∞·ªùi")

        cam_options = [c["cam_id"] for c in cams]
        cam_id = st.selectbox("Ch·ªçn camera", cam_options, key="single_cam_select")
        selected_cam = [c for c in cams if c["cam_id"] == cam_id][0]

        st.write(f"IP: {selected_cam['host']}")
        st.write(f"Tr·∫°ng th√°i: {'ONLINE' if selected_cam['online'] else 'OFFLINE'}")
        st.write(f"Pan hi·ªán t·∫°i: {selected_cam['pan']}¬∞")
        st.write(f"Tilt hi·ªán t·∫°i: {selected_cam['tilt']}¬∞")

        col1, col2 = st.columns(2)

        # --------------------------------------------------------
        # KH·ªêI TR√ÅI: Xem tr·ª±c ti·∫øp + Detect Now
        # --------------------------------------------------------
        with col1:
            st.markdown("### üî¥ Xem tr·ª±c ti·∫øp (g·∫ßn realtime)")

            live_mode = st.checkbox(
                "B·∫Øt ƒë·∫ßu xem live t·ª´ camera n√†y",
                key="single_live_enable"
            )
            ai_live_mode = st.checkbox(
                "B·∫≠t AI detect (v·∫Ω khung ng∆∞·ªùi) trong live",
                key="single_ai_live_enable"
            )
            fps_single = st.slider(
                "FPS hi·ªÉn th·ªã (t·ªëi ƒëa 10)",
                1, 10, 5,
                key="single_fps_slider"
            )

            live_placeholder = st.empty()
            detect_status_placeholder = st.empty()  # ƒë·ªÉ hi·ªÉn th·ªã tr·∫°ng th√°i PH√ÅT HI·ªÜN / OK

            if live_mode:
                delay = 1.0 / float(fps_single)
                for i in range(100):
                    if ai_live_mode:
                        # g·ªçi detect_only_frame ƒë·ªÉ l·∫•y ·∫£nh c√≥ v·∫Ω bbox + k·∫øt qu·∫£ AI
                        try:
                            dr = requests.get(
                                f"{BACKEND}/api/detect_only_frame/{cam_id}",
                                timeout=4
                            )
                            if dr.status_code == 200:
                                det_json = dr.json()
                                img_ai = render_ai_frame_from_b64(det_json.get("annotated_jpeg_b64"))
                                if img_ai is not None:
                                    live_placeholder.image(
                                        img_ai,
                                        caption=f"{cam_id} AI live frame {i}",
                                        width='stretch'
                                    )
                                else:
                                    live_placeholder.warning("Kh√¥ng decode ƒë∆∞·ª£c ·∫£nh AI.")
                                # c·∫≠p nh·∫≠t tr·∫°ng th√°i ph√°t hi·ªán
                                if det_json.get("note"):
                                    detect_status_placeholder.warning(det_json["note"])
                                elif det_json.get("detected"):
                                    detect_status_placeholder.warning(
                                        f"üö® PH√ÅT HI·ªÜN NG∆Ø·ªúI! conf={det_json.get('max_confidence',0):.2f}"
                                    )
                                else:
                                    detect_status_placeholder.success("‚úÖ Kh√¥ng ph√°t hi·ªán ng∆∞·ªùi")
                            else:
                                live_placeholder.warning("Detect API l·ªói")
                        except Exception as e:
                            live_placeholder.error(f"L·ªói detect live: {e}")
                    else:
                        # ch·∫ø ƒë·ªô live th∆∞·ªùng (kh√¥ng AI)
                        try:
                            frame_resp = requests.get(
                                f"{BACKEND}/api/stream_frame/{cam_id}",
                                timeout=3
                            )
                            if frame_resp.status_code == 200:
                                img_bytes = frame_resp.content
                                live_placeholder.image(
                                    Image.open(io.BytesIO(img_bytes)),
                                    caption=f"{cam_id} live frame {i}",
                                    width='stretch'
                                )
                            else:
                                live_placeholder.warning("Kh√¥ng l·∫•y ƒë∆∞·ª£c frame t·ª´ camera.")
                                break
                        except Exception as e:
                            live_placeholder.error(f"L·ªói k·∫øt n·ªëi: {e}")
                            break

                    time.sleep(delay)

            st.markdown("### üëÅÔ∏è Ph√°t hi·ªán ng∆∞·ªùi (Detect Now)")
            if st.button("Detect Now"):
                try:
                    r = requests.get(f"{BACKEND}/api/detect_frame/{cam_id}", timeout=5)
                except Exception as e:
                    st.error(f"Kh√¥ng g·ªçi ƒë∆∞·ª£c backend detect: {e}")
                else:
                    if r.status_code != 200:
                        st.error(
                            f"L·ªói backend detect (HTTP {r.status_code}): {r.text[:200]}"
                        )
                    else:
                        # c·ªë parse JSON
                        try:
                            det = r.json()
                        except Exception as e:
                            st.error(
                                f"Parse JSON th·∫•t b·∫°i: {e}\nTr·∫£ v·ªÅ: {r.text[:200]}"
                            )
                        else:
                            # --- x·ª≠ l√Ω k·∫øt qu·∫£ ---
                            if det.get("note"):
                                st.warning(det["note"])

                            if det.get("detected"):
                                st.warning(
                                    f"üö® PH√ÅT HI·ªÜN NG∆Ø·ªúI! conf={det.get('max_confidence',0):.2f}"
                                )
                            else:
                                st.success("‚úÖ Kh√¥ng ph√°t hi·ªán ng∆∞·ªùi.")

                            # hi·ªÉn th·ªã ·∫£nh snapshot n·∫øu c√≥
                            if det.get("saved_image"):
                                st.write("·∫¢nh snapshot:")
                                try:
                                    img_bytes = requests.get(
                                        f"{BACKEND}/api/event_image",
                                        params={"path": det["saved_image"]},
                                        timeout=5
                                    ).content
                                    st.image(
                                        Image.open(io.BytesIO(img_bytes)),
                                        caption=det["saved_image"],
                                        width='stretch'
                                    )
                                except Exception as ee:
                                    st.error(f"Kh√¥ng t·∫£i ƒë∆∞·ª£c ·∫£nh snapshot: {ee}")

        # --------------------------------------------------------
        # KH·ªêI PH·∫¢I: Servo + B√°o ƒë·ªông + Ghi h√¨nh
        # --------------------------------------------------------
        with col2:
            # ---- Servo ----
            st.markdown("### üß≠ ƒêi·ªÅu khi·ªÉn Servo")
            new_pan = st.slider(
                "Pan (0-180¬∞)",
                0, 180,
                selected_cam["pan"],
                key="pan_slider_single"
            )
            new_tilt = st.slider(
                "Tilt (0-180¬∞)",
                0, 180,
                selected_cam["tilt"],
                key="tilt_slider_single"
            )

            if st.button("üì° C·∫≠p nh·∫≠t g√≥c Servo"):
                try:
                    r = requests.post(
                        f"{BACKEND}/api/servo/{cam_id}",
                        json={"pan": new_pan, "tilt": new_tilt},
                        timeout=5
                    )
                    if r.status_code == 200:
                        st.success("ƒê√£ g·ª≠i l·ªánh servo")
                    else:
                        st.error(f"L·ªói servo: {r.status_code} {r.text[:200]}")
                except Exception as e:
                    st.error(f"G·ª≠i servo l·ªói: {e}")

            st.divider()

            # ---- B√°o ƒë·ªông ----
            st.markdown("### üîä B√°o ƒë·ªông √¢m thanh")
            alarm_enabled_toggle = st.checkbox(
                "B·∫≠t b√°o ƒë·ªông khi ph√°t hi·ªán ng∆∞·ªùi",
                value=True,
                key="alarm_toggle_single"
            )
            # G·ª≠i tr·∫°ng th√°i b√°o ƒë·ªông v·ªÅ backend (best effort, kh√¥ng ch·∫∑n UI)
            try:
                requests.post(
                    f"{BACKEND}/api/toggle_alarm",
                    json={"enabled": alarm_enabled_toggle},
                    timeout=3
                )
            except Exception:
                pass

            st.divider()

            # ---- Ghi h√¨nh th·ªß c√¥ng ----
            st.markdown("### ‚è∫ Ghi h√¨nh th·ªß c√¥ng (c√≥ timestamp)")

            # H·ªèi backend xem cam n√†y c√≥ ƒëang ghi kh√¥ng
            rec_status = get_recording_status_for_cam(BACKEND, cam_id)

            if rec_status["recording"]:
                st.success(
                    f"üî¥ ƒêANG GHI: {rec_status['file']}\n"
                    f"{rec_status['fps']} fps | b·∫Øt ƒë·∫ßu l√∫c {rec_status['start_ts']}"
                )
            else:
                st.info("üü° Ch∆∞a ghi h√¨nh.")

            # ch·ªçn fps khi start
            rec_fps = st.slider(
                "FPS ghi h√¨nh",
                min_value=1,
                max_value=10,
                value=5,
                key="rec_fps_slider_single"
            )

            col_rec1, col_rec2 = st.columns(2)
            with col_rec1:
                if st.button("‚ñ∂Ô∏è Start Recording"):
                    try:
                        r = requests.post(
                            f"{BACKEND}/api/record/start/{cam_id}",
                            json={"fps": rec_fps},
                            timeout=5
                        )
                        if r.status_code == 200:
                            data = r.json()
                            if data.get("status") == "recording_started":
                                st.success(f"üöÄ B·∫Øt ƒë·∫ßu ghi: {data.get('file')}")
                            elif data.get("status") == "already_recording":
                                st.warning("‚ö† Camera n√†y ƒëang ghi r·ªìi.")
                            else:
                                st.write(data)
                        else:
                            st.error(f"‚ùå Start record l·ªói: {r.status_code} {r.text[:200]}")
                    except Exception as e:
                        st.error(f"Start record request fail: {e}")

            with col_rec2:
                if st.button("‚èπ Stop Recording"):
                    try:
                        r = requests.post(
                            f"{BACKEND}/api/record/stop/{cam_id}",
                            timeout=5
                        )
                        if r.status_code == 200:
                            data = r.json()
                            if data.get("status") == "recording_stopped":
                                st.success(f"üíæ ƒê√£ l∆∞u file: {data.get('file')}")
                            else:
                                st.write(data)
                        else:
                            st.error(f"‚ùå Stop record l·ªói: {r.status_code} {r.text[:200]}")
                    except Exception as e:
                        st.error(f"Stop record request fail: {e}")

            st.caption("Video .mp4 c√≥ timestamp s·∫Ω xu·∫•t hi·ªán ·ªü tab 'Recordings' sau khi b·∫°n Stop.")


    # --------------------------------------------------------
    # TAB 2: Xem nhi·ªÅu camera c√πng l√∫c
    # --------------------------------------------------------
    with tab_multi:
        st.subheader("Xem nhi·ªÅu camera c√πng l√∫c (t·ªëi ƒëa 4 cam)")

        # danh s√°ch camera kh·∫£ d·ª•ng
        cam_choices_multi = [c["cam_id"] for c in cams]

        selected_multi = st.multiselect(
            "Ch·ªçn camera ƒë·ªÉ xem:",
            cam_choices_multi,
            default=cam_choices_multi[:4],
            key="multi_cam_select"
        )

        # ch·ªâ l·∫•y t·ªëi ƒëa 4 cam cho layout 2x2
        selected_multi = selected_multi[:4]

        if len(selected_multi) == 0:
            st.info("Ch·ªçn √≠t nh·∫•t 1 camera ƒë·ªÉ xem.")
            st.stop()

        # =====================================================
        # PH·∫¶N QU·∫¢N L√ù GHI H√åNH H√ÄNG LO·∫†T
        # =====================================================
        st.markdown("### üé• ƒêi·ªÅu khi·ªÉn ghi h√¨nh h√†ng lo·∫°t")
        col_ctrl_a, col_ctrl_b = st.columns(2)

        # Ch·ªçn fps d√πng khi b·∫•m Start Recording nhi·ªÅu cam
        with col_ctrl_a:
            fps_multi_record = st.slider(
                "FPS ghi h√¨nh cho t·∫•t c·∫£ cam ƒë∆∞·ª£c ch·ªçn",
                min_value=1,
                max_value=10,
                value=5,
                key="multi_rec_fps_slider"
            )

            if st.button("‚ñ∂Ô∏è Start Recording c√°c cam ƒë√£ ch·ªçn", key="multi_start_record_btn"):
                msgs = []
                for cid in selected_multi:
                    try:
                        rr = requests.post(
                            f"{BACKEND}/api/record/start/{cid}",
                            json={"fps": fps_multi_record},
                            timeout=5,
                        )
                        if rr.status_code == 200:
                            data = rr.json()
                            if data.get("status") == "recording_started":
                                msgs.append(f"{cid}: b·∫Øt ƒë·∫ßu ghi ({data.get('file')})")
                            elif data.get("status") == "already_recording":
                                msgs.append(f"{cid}: ƒëang ghi r·ªìi")
                            else:
                                msgs.append(f"{cid}: {data}")
                        else:
                            msgs.append(f"{cid}: l·ªói HTTP {rr.status_code}")
                    except Exception as e:
                        msgs.append(f"{cid}: l·ªói k·∫øt n·ªëi {e}")

                st.write("K·∫øt qu·∫£ Start:")
                for m in msgs:
                    st.write("- " + m)

        with col_ctrl_b:
            if st.button("‚èπ Stop Recording c√°c cam ƒë√£ ch·ªçn", key="multi_stop_record_btn"):
                msgs = []
                for cid in selected_multi:
                    try:
                        rr = requests.post(
                            f"{BACKEND}/api/record/stop/{cid}",
                            timeout=5,
                        )
                        if rr.status_code == 200:
                            data = rr.json()
                            if data.get("status") == "recording_stopped":
                                msgs.append(f"{cid}: d·ª´ng ghi, l∆∞u {data.get('file')}")
                            else:
                                msgs.append(f"{cid}: {data}")
                        else:
                            msgs.append(f"{cid}: l·ªói HTTP {rr.status_code}")
                    except Exception as e:
                        msgs.append(f"{cid}: l·ªói k·∫øt n·ªëi {e}")

                st.write("K·∫øt qu·∫£ Stop:")
                for m in msgs:
                    st.write("- " + m)

        # Tr·∫°ng th√°i hi·ªán t·∫°i t·ª´ng camera (c√≥ ƒëang record kh√¥ng)
        st.markdown("#### Tr·∫°ng th√°i ghi h√¨nh hi·ªán t·∫°i")
        for cid in selected_multi:
            st_status = get_recording_status_for_cam(BACKEND, cid)
            if st_status["recording"]:
                st.success(
                    f"{cid}: üî¥ ƒêANG GHI  "
                    f"({st_status['fps']} fps, file={st_status['file']}, start={st_status['start_ts']})"
                )
            else:
                st.info(f"{cid}: üü° Kh√¥ng ghi h√¨nh")

        st.divider()

        # =====================================================
        # PH·∫¶N DETECT NG∆Ø·ªúI ƒê·ªíNG TH·ªúI NHI·ªÄU CAM
        # =====================================================

        st.markdown("### üß† Ph√°t hi·ªán ng∆∞·ªùi ƒë·ªìng th·ªùi tr√™n nhi·ªÅu camera")

        detect_multi_btn = st.button("üîé Detect ng∆∞·ªùi tr√™n c√°c cam ƒë√£ ch·ªçn", key="multi_detect_btn")

        if detect_multi_btn:
            # results_detect_multi l√† danh s√°ch ƒë·ªÉ show ph√≠a d∆∞·ªõi
            results_detect_multi = []

            for cid in selected_multi:
                try:
                    r = requests.get(f"{BACKEND}/api/detect_frame/{cid}", timeout=5)
                except Exception as e:
                    results_detect_multi.append({
                        "cam_id": cid,
                        "ok": False,
                        "err": f"Kh√¥ng g·ªçi ƒë∆∞·ª£c backend detect: {e}",
                        "det": None
                    })
                    continue

                if r.status_code != 200:
                    results_detect_multi.append({
                        "cam_id": cid,
                        "ok": False,
                        "err": f"L·ªói backend detect (HTTP {r.status_code}): {r.text[:200]}",
                        "det": None
                    })
                else:
                    # c·ªë parse JSON
                    try:
                        det = r.json()
                    except Exception as e:
                        results_detect_multi.append({
                            "cam_id": cid,
                            "ok": False,
                            "err": f"Parse JSON th·∫•t b·∫°i: {e} | Tr·∫£ v·ªÅ: {r.text[:200]}",
                            "det": None
                        })
                    else:
                        results_detect_multi.append({
                            "cam_id": cid,
                            "ok": True,
                            "err": None,
                            "det": det
                        })

            # render k·∫øt qu·∫£ detect
            st.markdown("#### K·∫øt qu·∫£ Detect")
            for item in results_detect_multi:
                cid = item["cam_id"]
                box = st.container()
                with box:
                    st.markdown(f"**Camera `{cid}`**")
                    if not item["ok"]:
                        st.error(item["err"])
                        continue

                    det = item["det"]

                    # Th√¥ng tin note t·ª´ backend (VD: "camera error: ...")
                    note_msg = det.get("note", "")
                    if note_msg:
                        st.warning(note_msg)

                    # Ng∆∞·ªùi?
                    if det.get("detected"):
                        st.warning(
                            f"üö® PH√ÅT HI·ªÜN NG∆Ø·ªúI! conf={det.get('max_confidence',0):.2f}"
                        )
                    else:
                        st.success("‚úÖ Kh√¥ng ph√°t hi·ªán ng∆∞·ªùi.")

                    # show snapshot c√≥ bounding box
                    if det.get("saved_image"):
                        try:
                            img_bytes = requests.get(
                                f"{BACKEND}/api/event_image",
                                params={"path": det["saved_image"]},
                                timeout=5
                            ).content
                            st.image(
                                Image.open(io.BytesIO(img_bytes)),
                                caption=f"{cid} snapshot {det['saved_image']}",
                               width='stretch'
                            )
                        except Exception as ee:
                            st.error(f"Kh√¥ng t·∫£i ƒë∆∞·ª£c ·∫£nh snapshot: {ee}")

        st.divider()

        # =====================================================
        # PH·∫¶N XEM LIVE / SNAPSHOT NHI·ªÄU CAM
        # =====================================================
        st.markdown("### üëÄ Xem nhi·ªÅu cam (live / snapshot)")

        fps_multi = st.slider(
            "FPS hi·ªÉn th·ªã t·∫•t c·∫£ cam (t·ªëi ƒëa 10)",
            1, 10, 5,
            key="multi_fps_slider"
        )
        live_multi = st.checkbox(
            "üî¥ B·∫Øt ƒë·∫ßu xem live ƒë·ªìng th·ªùi",
            key="multi_live_enable"
        )
        ai_multi_live = st.checkbox(
            "B·∫≠t AI detect (v·∫Ω khung ng∆∞·ªùi) trong live nhi·ªÅu cam",
            key="multi_ai_live_enable"
        )

        st.caption("Tip: n·∫øu t·∫Øt live, b·∫°n c√≥ th·ªÉ ch·ª•p snapshot 1 l·∫ßn b·∫±ng n√∫t b√™n d∆∞·ªõi.")
        refresh_multi = st.button(
            "üì∏ Ch·ª•p snapshot t·∫•t c·∫£ cam (1 l·∫ßn)",
            key="multi_snapshot_btn"
        )

        # Chu·∫©n b·ªã layout 2x2
        colA, colB = st.columns(2)
        colC, colD = st.columns(2)
        grid_cols = [colA, colB, colC, colD]

        # placeholders cho t·ª´ng √¥
        frame_placeholders = [c.empty() for c in grid_cols]
        info_placeholders = [c.empty() for c in grid_cols]
        detect_placeholders = [c.empty() for c in grid_cols]  # tr·∫°ng th√°i AI t·ª´ng cam

        def render_one_cam(i_slot: int, cam_id_slot: str, frame_idx: int = None, just_once=False):
            # t√¨m info camera
            cam_info_slot_list = [c for c in cams if c["cam_id"] == cam_id_slot]
            if not cam_info_slot_list:
                info_placeholders[i_slot].warning(f"{cam_id_slot}: kh√¥ng t√¨m th·∫•y trong danh s√°ch.")
                return
            cam_info_slot = cam_info_slot_list[0]

            cam_host = cam_info_slot["host"]
            cam_online = cam_info_slot["online"]

            # header m√¥ t·∫£ (cam id + ip + tr·∫°ng th√°i)
            caption_header = (
                f"**{cam_id_slot}**  \n"
                f"`{cam_host}` - {'ONLINE' if cam_online else 'OFFLINE'}"
            )
            info_placeholders[i_slot].markdown(caption_header)

            # n·∫øu b·∫≠t AI live
            if ai_multi_live:
                try:
                    dr = requests.get(
                        f"{BACKEND}/api/detect_only_frame/{cam_id_slot}",
                        timeout=4
                    )
                    if dr.status_code == 200:
                        det_json = dr.json()

                        # decode annotated frame
                        img_ai = render_ai_frame_from_b64(det_json.get("annotated_jpeg_b64"))
                        if img_ai is not None:
                            cap_text = f"{cam_id_slot} AI live"
                            if frame_idx is not None:
                                cap_text = f"{cam_id_slot} AI live frame {frame_idx}"
                            frame_placeholders[i_slot].image(
                                img_ai,
                                caption=cap_text,
                                width='stretch'
                            )
                        else:
                            frame_placeholders[i_slot].warning("Kh√¥ng decode ƒë∆∞·ª£c ·∫£nh AI.")

                        # tr·∫°ng th√°i ph√°t hi·ªán ng∆∞·ªùi
                        if det_json.get("note"):
                            detect_placeholders[i_slot].warning(det_json["note"])
                        elif det_json.get("detected"):
                            detect_placeholders[i_slot].warning(
                                f"üö® Ng∆∞·ªùi! conf={det_json.get('max_confidence',0):.2f}"
                            )
                        else:
                            detect_placeholders[i_slot].success("‚úÖ Kh√¥ng ph√°t hi·ªán ng∆∞·ªùi")
                    else:
                        frame_placeholders[i_slot].warning("Detect API l·ªói")
                except Exception as e:
                    frame_placeholders[i_slot].error(f"L·ªói detect live: {e}")
                    if just_once:
                        return

            else:
                # ch·∫ø ƒë·ªô live th∆∞·ªùng (kh√¥ng AI)
                try:
                    fr = requests.get(
                        f"{BACKEND}/api/stream_frame/{cam_id_slot}",
                        timeout=3
                    )
                    if fr.status_code == 200:
                        img_b = fr.content
                        cap_text = f"{cam_id_slot} snapshot"
                        if frame_idx is not None:
                            cap_text = f"{cam_id_slot} live frame {frame_idx}"
                        frame_placeholders[i_slot].image(
                            Image.open(io.BytesIO(img_b)),
                            caption=cap_text,
                            width='stretch'
                        )
                    else:
                        frame_placeholders[i_slot].warning("Kh√¥ng l·∫•y ƒë∆∞·ª£c frame.")
                except Exception as e:
                    frame_placeholders[i_slot].error(f"L·ªói k·∫øt n·ªëi: {e}")
                    if just_once:
                        return

        # Snapshot one-shot
        if refresh_multi and not live_multi:
            for idx, cam_id_slot in enumerate(selected_multi):
                render_one_cam(idx, cam_id_slot, frame_idx=None, just_once=True)

        # Live loop
        if live_multi:
            delay_multi = 1.0 / float(fps_multi)
            for frame_idx in range(100):  # ~100 frame cho m·ªói l·∫ßn b·∫≠t
                for idx, cam_id_slot in enumerate(selected_multi):
                    render_one_cam(idx, cam_id_slot, frame_idx=frame_idx, just_once=False)
                time.sleep(delay_multi)

# ============================================================
# PAGE: Events
# ============================================================
elif page == "Events":
    st.subheader("S·ª± ki·ªán ph√°t hi·ªán ng∆∞·ªùi")
    ev_resp = requests.get(f"{BACKEND}/api/events").json()
    events = ev_resp["events"]

    if not events:
        st.info("Ch∆∞a c√≥ s·ª± ki·ªán n√†o.")
    else:
        for ev in events:
            with st.expander(
                f"[{ev['ts']}] Cam {ev['cam_id']}  conf={ev['confidence']:.2f}"
            ):
                img_bytes = requests.get(
                    f"{BACKEND}/api/event_image",
                    params={"path": ev["img_path"]}
                ).content
                st.image(
                    Image.open(io.BytesIO(img_bytes)),
                    caption=ev["img_path"],
                    width='stretch'
                )

# ============================================================
# PAGE: Recordings
# ============================================================
elif page == "Recordings":
    st.subheader("üìº Video ƒë√£ ghi")

    # l·∫•y danh s√°ch file t·ª´ backend
    rec_resp = requests.get(f"{BACKEND}/api/recordings").json()
    recs = rec_resp.get("recordings", [])

    if len(recs) == 0:
        st.info("Ch∆∞a c√≥ video ghi h√¨nh n√†o.")
        st.stop()

    # Ch·ªçn 1 file ƒë·ªÉ xem
    # recs: b·∫°n ƒëang tr·∫£ d·∫°ng list c√°c dict/paths? 
    # Gi·∫£ s·ª≠ m·ªói ph·∫ßn t·ª≠ l√† path tuy·ªát ƒë·ªëi ho·∫∑c t∆∞∆°ng ƒë·ªëi. 
    # Ta s·∫Ω hi·ªÉn th·ªã t√™n file = os.path.basename()
    file_display_names = []
    for r in recs:
        # n·∫øu recordings l√† chu·ªói path th√¨ d√πng lu√¥n r,
        # c√≤n n·∫øu l√† dict {"file": "..."} th√¨ adapt l·∫°i
        if isinstance(r, dict) and "file" in r:
            fpath = r["file"]
        else:
            fpath = str(r)
        file_display_names.append(fpath)

    chosen_file = st.selectbox(
        "Ch·ªçn video ƒë·ªÉ xem:",
        options=file_display_names,
        index=0
    )

    # N√∫t t·∫£i v·ªÅ
    dl_url = f"{BACKEND}/api/download_video?file={urllib.parse.quote(chosen_file)}"
    st.markdown(f"[‚¨áÔ∏è T·∫£i video]({dl_url})")

    # Ph√°t tr·ª±c ti·∫øp tr√™n trang
    preview_url = f"{BACKEND}/api/preview_video?file={urllib.parse.quote(chosen_file)}"
    st.markdown("### ‚ñ∂Ô∏è Xem tr·ª±c ti·∫øp")
    st.video(preview_url)

    st.markdown("---")
    st.write("Danh s√°ch t·∫•t c·∫£ video c√≥ s·∫µn:")
    for f in file_display_names:
        st.write("-", f)


# ============================================================
# PAGE: Camera Manager (th√™m / x√≥a camera)
# ============================================================
elif page == "Camera Manager":
    st.subheader("Qu·∫£n l√Ω Camera ESP32-CAM")

    st.markdown("#### Danh s√°ch camera hi·ªán c√≥")
    data_full = requests.get(f"{BACKEND}/api/cameras_full").json()
    cams = data_full["cameras"]

    if not cams:
        st.info("Hi·ªán ch∆∞a c√≥ camera n√†o trong h·ªá th·ªëng.")
    else:
        for cam in cams:
            st.markdown(
                f"- **{cam['cam_id']}**  "
                f"(type: `{cam.get('type','esp32')}`)  "
                f"(IP: `{cam.get('host','')}`)  "
                f"User: `{cam.get('username','')}`  "
                f"Pass: `{cam.get('password','')}`  "
                f"(pan={cam.get('pan',0)} tilt={cam.get('tilt',0)})"
            )

    st.markdown("---")

    # --- Form th√™m camera m·ªõi ---
    st.markdown("### ‚ûï Th√™m camera m·ªõi (ESP32-CAM ho·∫∑c laptop_cam)")
    with st.form("add_cam_form"):
        new_cam_id = st.text_input("Camera ID (v√≠ d·ª•: cam2, cam3, pc_cam)")
        new_host = st.text_input("ƒê·ªãa ch·ªâ host/IP (v√≠ d·ª•: http://192.168.137.192 ho·∫∑c http://localhost:9000)")
        new_user = st.text_input("Username ƒëƒÉng nh·∫≠p camera")
        new_pass = st.text_input("Password ƒëƒÉng nh·∫≠p camera", type="password")
        submitted = st.form_submit_button("Th√™m camera")

        if submitted:
            if not new_cam_id or not new_host or not new_user or not new_pass:
                st.error("Thi·∫øu tr∆∞·ªùng th√¥ng tin.")
            else:
                resp = requests.post(
                    f"{BACKEND}/api/add_camera",
                    json={
                        "cam_id": new_cam_id,
                        "host": new_host,
                        "username": new_user,
                        "password": new_pass
                    }
                )
                if resp.status_code == 200:
                    st.success(f"ƒê√£ th√™m camera {new_cam_id}")
                    st.rerun()
                else:
                    st.error(f"L·ªói khi th√™m camera: {resp.text}")

    st.markdown("---")

    # --- Form x√≥a camera ---
    st.markdown("### ‚ùå X√≥a camera")
    if cams:
        cam_choices = [c["cam_id"] for c in cams]
        cam_to_remove = st.selectbox("Ch·ªçn camera ƒë·ªÉ x√≥a", cam_choices)
        if st.button("X√≥a camera n√†y"):
            resp = requests.post(
                f"{BACKEND}/api/remove_camera",
                json={"cam_id": cam_to_remove}
            )
            if resp.status_code == 200:
                st.success(f"ƒê√£ x√≥a {cam_to_remove}")
                st.rerun()
            else:
                st.error(f"L·ªói khi x√≥a camera: {resp.text}")
    else:
        st.info("Kh√¥ng c√≥ camera n√†o ƒë·ªÉ x√≥a.")
